--
-- xmonad editor Wentura
--
--

import XMonad
import Data.Monoid
import System.Exit
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.DynamicLog	--For dzen2 and xmobar
import XMonad.Hooks.UrgencyHook
import XMonad.Util.EZConfig		--Light KeyBinding
--import XMonad.Layout.Tabbed		--ICQ
--import XMonad.Layout.PerWorkspace
--import XMonad.Actions.Volume

import Graphics.X11.ExtraTypes.XF86

import qualified XMonad.StackSet as W
import qualified Data.Map        as M

myTerminal      = "urxvt -vb -pe tabbed"

myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True
myBorderWidth   = 1
myModMask       = mod4Mask
myNumlockMask   = mod2Mask
myWorkspaces    = ["1:TERM","2:EDIT","3:WEB","4:IM","5:MEDIA"] ++ map show [6..9]
myNormalBorderColor  = "#dddddd"
myFocusedBorderColor = "orange"

myKeys = \conf -> mkKeymap conf $
           [  ("M-<Return>",   spawn $ (XMonad.terminal conf))
			, ("M-p",			spawn "exe=`dmenu_path | dmenu` && eval \"exec $exe\"")
			, ("M-S-p",			spawn "gmrun")
			, ("M-<Space>",	setLayout $ XMonad.layoutHook conf)
--			, ("M-<Space>",    sendMessage NextLayout)
			, ("M-<Tab>",      windows W.focusDown)
			, ("M-S-<Tab>",		windows W.focusUp)
			, ("M-m",			windows W.focusMaster  )
			, ("M-S-<Return>", windows W.swapMaster)
			, ("M-S-c",        kill)
			, ("M-S-q",        io (exitWith ExitSuccess))
			, ("M-b",          sendMessage ToggleStruts)
			, ("M-h",          sendMessage Shrink)
			, ("M-l",          sendMessage Expand)
			, ("M-n",          refresh)
           --, ("M-q",          broadcastMessage ReleaseResources >> restart "xmonad" True)
			, ("M-q",			spawn "xmonad --recompile; xmonad --restart")
			, ("M-t",          withFocused $ windows . W.sink)
			, ("M-c",			spawn "google-chrome")
			, ("M-S-b",			spawn "all_proxy=http://89.1.1.8:3128/ google-chrome")
			, ("M-g",			spawn "geany")
			, ("M-i",			spawn "empathy")
			, ("M-j",			windows W.swapDown  )
			, ("M-S-k",			windows W.swapUp    )
--			, ("M-comma",		sendMessage (IncMasterN 1))
--			, ("M-period",		sendMessage (IncMasterN (-1)))
--          , ("M-x",          shellPrompt defaultXPConfig)]
--			, ("M-S-t",			spawn "gnome-terminal")
			]
    ++ mediaKeys ++
    [ (otherModMasks ++ "M-" ++ [key], action tag)
         | (tag, key)  <- zip myWorkspaces "123456789"
         , (otherModMasks, action) <- [ ("", windows . W.view) -- was W.greedyView
                                      , ("S-", windows . W.shift)]
    ]

mediaKeys = [ ("<XF86AudioPlay>",		spawn "mpc play")
	, ("<XF86AudioPause>",		spawn "mpc pause")
	, ("<XF86AudioNext>",		spawn "mpc next")
	, ("<XF86AudioPrev>",		spawn "mpc prev")
	, ("<XF86AudioRaiseVolume>",	spawn "amixer -q set Master 2+")
	--, ("<XF86AudioRaiseVolume>",	lowerVolume 3)
	, ("<XF86AudioLowerVolume>",	spawn "amixer -q set Master 2-")
	, ("<Print>",			spawn "scrot")
	]

myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))
    ]

myLayout = tiled ||| Mirror tiled ||| Full
  where
     tiled   = Tall nmaster delta ratio
     nmaster = 1
     ratio   = 1/2
     delta   = 3/100

------------------------------------------------------------------------
-- > xprop | grep WM_CLASS
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , className =? "Onboard"           --> doFloat
	, appName =? "google-chrome"	--> doF(W.shift "3:WEB")
	, appName =? "geany"		--> doF(W.shift "2:EDIT")
	, appName =? "urxvt"		--> doF(W.shift "1:TERM")
	, className =? "stalonetray"	--> doIgnore
    , resource  =? "desktop_window" --> doIgnore
	, resource  =? "XXKb"			--> doIgnore
    , resource  =? "kdesktop"       --> doIgnore ]

myEventHook = mempty

myLogHook = return ()

myStartupHook = return ()

main = xmonad =<< xmobar defaults

defaults = defaultConfig {
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        numlockMask        = myNumlockMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = avoidStruts myLayout,
        manageHook         = myManageHook <+> manageDocks,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }
